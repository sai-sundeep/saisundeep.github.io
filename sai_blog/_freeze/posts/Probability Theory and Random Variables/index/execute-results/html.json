{
  "hash": "ea7389f3756bb1933f903f4912437962",
  "result": {
    "markdown": "---\ntitle: 'Probability Theory - Gaussian Distribution, Normality Tests, and Z-Scores'\nauthor: Sai Sundeep Rayidi\ndate: '2023-11-21'\ncategories:\n  - Probability Theory\n  - Gaussian Distribution\n  - Visualization\n  - Normality Test\nimage: Standard_deviation_diagram_micro.png\n---\n\nIn this blogpost, we will be discussing an important topic in statistics and machine learning - the *Gaussian Distribution*, also called the *Normal Distribution*. It is used to model many natural phenomena in the world, from people's heights to size of snowflakes, errors in measurements, and other financial and forecasting data. We will talk about why gaussian distribution is important in machine learning and how many ML algorithms assume that underlying data is normally distributed. We will explore some graphical and numerical methods to perform normality tests on data. Finally, we will try to transform the data to standard normal distribution by calculating *z-scores*. At a high level, we will explore -\n\n1. Normal Distribution and Machine Learning\n2. Normality Tests\n    * Graphical Methods\n    * Statistical Normality Tests\n3. Transformation to Standard Normal Distribution (Scaling): Z-Scores\n\n\nWe will be working with the **iris** dataset throughout this blogpost.\n\n\n## 1. Normal Distribution and Machine Learning\n\n\nA normal distribution is a probability distribution that is symmetric about the mean, showing that data near the mean are more frequent in occurrence than data far from the mean. It is also known as the Gaussian distribution. The standard normal distribution is a normal distribution with zero mean and unit variance. The normal distribution has several key features and properties that define it. First, its mean (average), median (midpoint), and mode (most frequent observation) are all equal to one another. Moreover, these values all represent the peak, or highest point, of the distribution. The distribution then falls symmetrically around the mean, the width of which is defined by the standard deviation.\n\nAll normal distributions can be described by just two parameters: the mean and the standard deviation. The Empirical Rule states that for all normal distributions, 68.2% of the observations will appear within plus or minus one standard deviation of the mean; 95.4% of the observations will fall within +/- two standard deviations; and 99.7% within +/- three standard deviations. This fact is sometimes referred to as the \"empirical rule,\" a heuristic that describes where most of the data in a normal distribution will appear. This means that data falling outside of three standard deviations (\"3-sigma\") would signify rare occurrences\n\n![Standard Normal Distribution](Standard_deviation_diagram_micro.png)\n\nMachine learning models can be classified into two categories: parametric and non-parametric methods.\n\nParametric methods are those that require the specification of some parameters before they can be used to make predictions. These models make assumptions about the distribution of the data, and the parameters are estimated from the training data. They are generally simpler and faster to train and do not require huge amounts of data contrary to non-parametric methods. Non-parametric models do not make any assumptions about the distribution of the data and instead rely on the data itself to determine the model structure, they may be slower to train and require more data to achieve good performance.\n\nIt is usually good practice to first try parametric models like Linear Regression, Logistic Regression, Linear Discriminant Analysis (LDA), and Gaussian Naive Bias before exploring other non-parametric methods and advanced models. Furthermore, converting the data into a normal distribution allows for fair comparisons of features with different distributions and scales and improve the accuracy of predictions.\n\nLet us start importing some packages and exploring the diamonds dataset and its features.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:10.370907400Z\",\"start_time\":\"2023-11-21T21:26:10.320453200Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy\nimport warnings\n\nwarnings.simplefilter('ignore', UserWarning)\niris = sns.load_dataset('iris')\niris.head(10)\n# iris.columns #'sepal_length', 'sepal_width', 'petal_length', 'petal_width','species'\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal_length</th>\n      <th>sepal_width</th>\n      <th>petal_length</th>\n      <th>petal_width</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.1</td>\n      <td>3.5</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.9</td>\n      <td>3.0</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.7</td>\n      <td>3.2</td>\n      <td>1.3</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.6</td>\n      <td>3.1</td>\n      <td>1.5</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>3.6</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.4</td>\n      <td>3.9</td>\n      <td>1.7</td>\n      <td>0.4</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>4.6</td>\n      <td>3.4</td>\n      <td>1.4</td>\n      <td>0.3</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>5.0</td>\n      <td>3.4</td>\n      <td>1.5</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>4.4</td>\n      <td>2.9</td>\n      <td>1.4</td>\n      <td>0.2</td>\n      <td>setosa</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>4.9</td>\n      <td>3.1</td>\n      <td>1.5</td>\n      <td>0.1</td>\n      <td>setosa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:10.496740Z\",\"start_time\":\"2023-11-21T21:26:10.336354Z\"}' execution_count=2}\n``` {.python .cell-code}\nplt.figure()\nsns.histplot(iris, x='sepal_length', kde=True)\nplt.title(\"Distribution of \\\"sepal_length\\\" Feature\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=585 height=449}\n:::\n:::\n\n\nA variable that is normally distributed has a histogram (or \"density function\") that is bell-shaped, with only one peak, and is symmetric around the mean. The sepal_length feature does seem to resember the bell-shaped curve and can be normally distributed, lets us explore the other numeric features as well.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:11.002772900Z\",\"start_time\":\"2023-11-21T21:26:10.476596200Z\"}' execution_count=3}\n``` {.python .cell-code}\ndef iris_histogram_plotter(df):\n    features_list = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\n    counter = 0\n    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8, 8))\n    for i in range(2):\n        for j in range(2):\n            sns.histplot(df, x=features_list[counter], kde=True, ax=axs[i][j])\n            axs[i][j].set_title(f\"Distribution of \\\"{features_list[counter]}\\\" Feature\")\n            counter += 1\n    plt.tight_layout()\n    plt.show()\n\niris_histogram_plotter(df=iris)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=758 height=758}\n:::\n:::\n\n\nWe can see that amongst the four sepal_length and sepal_width features seem normally distributed. However, we will need to use more rigid tests to assess the normality of these features.\n\n## 2. Normality Tests\n\nA normality test is used to determine whether sample data has been drawn from a normally distributed population (within some tolerance). We can use graphical/visual methods or normality tests to assess normality of the data.\n\n### 2.1 Graphical Methods\nAlthough somewhat unreliable and does not always guarantee that the distribution is normal, visual inspection is a very helpful step in assessing normality. The frequency distributions (histogram) we plotted earlier are one of the visual techniques. Other methods like stem-and-leaf plot, boxplot, P-P (probability-probability) plot, and **Q-Q plot (quantile-quantile plot)** are used for checking normality visually. We already explored histogram plot, we will plot Q-Q plot to test normality of numerical features in iris dataset. If the data is normally distributed for a feature, the points will fall on the 45-degree reference line.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:11.314085Z\",\"start_time\":\"2023-11-21T21:26:10.987109700Z\"}' execution_count=4}\n``` {.python .cell-code}\nfrom statsmodels.graphics.gofplots import qqplot\n\nfeatures_list = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\nfig = plt.figure(figsize=(8, 8))\nax1 = fig.add_subplot(221)\nqqplot(iris['sepal_length'], line='s', ax=ax1)\nax1.set_title(\"QQ-plot - Normality Test for \\\"sepal_length\\\" feature\")\nax1.grid()\n\nax2 = fig.add_subplot(222)\nqqplot(iris['petal_length'], line='s', ax=ax2)\nax2.set_title(\"QQ-plot - Normality Test for \\\"petal_length\\\" feature\")\nax2.grid()\n\nax1 = fig.add_subplot(223)\nqqplot(iris['sepal_width'], line='s', ax=ax1)\nax1.set_title(\"QQ-plot - Normality Test for \\\"sepal_width\\\" feature\")\nax1.grid()\n\nax2 = fig.add_subplot(224)\nqqplot(iris['petal_width'], line='s', ax=ax2)\nax2.set_title(\"QQ-plot - Normality Test for \\\"petal_width\\\" feature\")\nax2.grid()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=746 height=671}\n:::\n:::\n\n\nOnce again, we can see sepal length and width closely follow the standardized line while the petal length and petal width do not fit properly against the reference normal distribution.\n\n### 2.2 Statistical Normality Tests\n\nThe Statistical Normality Tests are supplementary to the graphical assessment of normality. Read [here](https://en.wikipedia.org/wiki/Normality_test#Frequentist_tests) for a complete list of normality tests. The main tests for the assessment of normality are -\n\n**[Kolmogorov-Smirnov (K-S) test](https://en.wikipedia.org/wiki/D%27Agostino%27s_K-squared_test)** or KS test is a nonparametric test of equality of a continuous one-dimensional probability distributions. It can be used to compare a sample with a reference probability distribution (like the samples drawn from normal distribution) or to compare two samples. The Kolmogorov–Smirnov statistic quantifies a distance between the empirical distribution function of the sample and the cumulative distribution function of the reference normal distribution. The empirical distribution function $F_n$ for n independent and identically distributed ordered observations $X_i$ is defined as -\n\n$$ {\\displaystyle F_{n}(x)={\\frac {{\\text{number of (elements in the sample}}\\leq x)}{n}}={\\frac {1}{n}}\\sum _{i=1}^{n}1_{(-\\infty ,x]}(X_{i}),} $$\n\n\nA limitation of the K-S test is its high sensitivity to extreme values.\n\n**[Shapiro-Wilk test](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test)** is based on the correlation between the data and the corresponding normal scores and provides better power than the K-S test. The test works by ordering and  standardizing the samples $\\mu=0$ and $\\sigma=1$. The test statistic is given by the formula -\n\n$$ {\\displaystyle W={\\left(\\sum _{i=1}^{n}a_{i}x_{(i)}\\right)^{2} \\over \\sum _{i=1}^{n}(x_{i}-{\\overline {x}})^{2}},} $$\n\nOne disadvantage is the Shapiro–Wilk test is known not to work well in samples with many identical values.\n\n\n**[D'Agostino's K-squared test](https://en.wikipedia.org/wiki/D%27Agostino%27s_K-squared_test)** is a statistical test that measures how well a given dataset fits a normal distribution. The test is based on the sample skewness and kurtosis, which are measures of the asymmetry and peakedness of the data, respectively. The test statistic is calculated as the sum of the squares of the standardized deviations of the sample skewness and kurtosis from their expected values under the assumption of normality. The test statistic is then compared to a chi-squared distribution with two degrees of freedom, and the p-value is calculated. If the p-value is less than the significance level, then the null hypothesis that the data is normally distributed is rejected. Otherwise, the null hypothesis is not rejected.\n\nD'Agostino's K-squared test is generally preferred over Shapiro-Wilk when the sample size is large.\n\nLet us import these methods from scipy.stats module, to test the normality of our iris dataset features.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:11.330059300Z\",\"start_time\":\"2023-11-21T21:26:11.314085Z\"}' execution_count=5}\n``` {.python .cell-code}\nfrom scipy.stats import kstest, shapiro, normaltest\n\nnp.random.seed(5805)\ndef calc_ks_test_statistics(sample):\n    sample_mean = np.mean(sample)\n    sample_sd = np.std(sample)\n    reference_normal_dist = np.random.normal(sample_mean, sample_sd, len(sample))\n    statistic, p_value = kstest(sample, reference_normal_dist)\n    return statistic, p_value\n\ndef calc_shapiro_test_statistics(sample):\n        statistic, p_value = shapiro(sample)\n        return statistic, p_value\n\ndef calc_dk2_test_statistics(sample):\n        statistic, p_value = normaltest(sample)\n        return statistic, p_value\n\n\ndef normality_test(df, feature_list, tolerance):\n    for feature in feature_list:\n        print('=' * 100)\n        ks_statistic, ks_pvalue = calc_ks_test_statistics(df[feature])\n        print(f\"Kolmogorov–Smirnov test: The test statistic and p-value of {feature} are {ks_statistic:.3f} and {ks_pvalue:.3f}\")\n        if ks_pvalue < tolerance:\n            print(f\"According to KS-Test the feature {feature} is NOT NORMALLY DISTRIBUTED.\")\n        else:\n            print(f\"According to KS-Test the feature {feature} is NORMALLY DISTRIBUTED!\")\n        print('=' * 100)\n        print()\n\n        print('=' * 100)\n        shapiro_statistic, shapiro_pvalue = calc_shapiro_test_statistics(df[feature])\n        print(f\"Shapiro-Wilk Test: The test statistic and p-value of {feature} are {shapiro_statistic:.3f} and {shapiro_pvalue:.3f}\")\n        if shapiro_pvalue < tolerance:\n            print(f\"According to Shapiro-Wilk the feature {feature} is NOT NORMALLY DISTRIBUTED.\")\n        else:\n            print(f\"According to Shapiro-Wilk the feature {feature} is NORMALLY DISTRIBUTED!\")\n        print('=' * 100)\n        print()\n\n\n        print('=' * 100)\n        dk2_statistic, dk2_pvalue = calc_dk2_test_statistics(df[feature])\n        print(f\"D’Agostino-Pearson Test: The test statistic and p-value of {feature} are {dk2_statistic:.3f} and {dk2_pvalue:.3f}\")\n        if dk2_pvalue < tolerance:\n            print(f\"According to D’Agostino-Pearson test the feature {feature} is NOT NORMALLY DISTRIBUTED.\")\n        else:\n            print(f\"According to D’Agostino-Pearson test the feature {feature} is NORMALLY DISTRIBUTED!\")\n        print('=' * 100)\n        print()\n\nfeatures_list = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\nnormality_test(df=iris, feature_list=features_list, tolerance=0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n====================================================================================================\nKolmogorov–Smirnov test: The test statistic and p-value of sepal_length are 0.080 and 0.725\nAccording to KS-Test the feature sepal_length is NORMALLY DISTRIBUTED!\n====================================================================================================\n\n====================================================================================================\nShapiro-Wilk Test: The test statistic and p-value of sepal_length are 0.976 and 0.010\nAccording to Shapiro-Wilk the feature sepal_length is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nD’Agostino-Pearson Test: The test statistic and p-value of sepal_length are 5.736 and 0.057\nAccording to D’Agostino-Pearson test the feature sepal_length is NORMALLY DISTRIBUTED!\n====================================================================================================\n\n====================================================================================================\nKolmogorov–Smirnov test: The test statistic and p-value of sepal_width are 0.173 and 0.022\nAccording to KS-Test the feature sepal_width is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nShapiro-Wilk Test: The test statistic and p-value of sepal_width are 0.985 and 0.101\nAccording to Shapiro-Wilk the feature sepal_width is NORMALLY DISTRIBUTED!\n====================================================================================================\n\n====================================================================================================\nD’Agostino-Pearson Test: The test statistic and p-value of sepal_width are 3.124 and 0.210\nAccording to D’Agostino-Pearson test the feature sepal_width is NORMALLY DISTRIBUTED!\n====================================================================================================\n\n====================================================================================================\nKolmogorov–Smirnov test: The test statistic and p-value of petal_length are 0.213 and 0.002\nAccording to KS-Test the feature petal_length is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nShapiro-Wilk Test: The test statistic and p-value of petal_length are 0.876 and 0.000\nAccording to Shapiro-Wilk the feature petal_length is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nD’Agostino-Pearson Test: The test statistic and p-value of petal_length are 221.687 and 0.000\nAccording to D’Agostino-Pearson test the feature petal_length is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nKolmogorov–Smirnov test: The test statistic and p-value of petal_width are 0.180 and 0.015\nAccording to KS-Test the feature petal_width is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nShapiro-Wilk Test: The test statistic and p-value of petal_width are 0.902 and 0.000\nAccording to Shapiro-Wilk the feature petal_width is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n====================================================================================================\nD’Agostino-Pearson Test: The test statistic and p-value of petal_width are 137.556 and 0.000\nAccording to D’Agostino-Pearson test the feature petal_width is NOT NORMALLY DISTRIBUTED.\n====================================================================================================\n\n```\n:::\n:::\n\n\nWe notice that all three tests are in perfect agreement on petal length and petal width. These two features are definitely not normally distributed. However, the tests vary in their agreements on whether sepal length and width is normal or not. Both KS-Test and D’Agostino-Pearson say that sepal_length is normally distributed at 95% confidence interval. Likewise, Shapiro-Wilk and D’Agostino-Pearson say that sepal width is normally distributed. These disagreements are typically because of the size of the dataset and also presence of many identical values in the response variable we are working with. \n\n## 3. Transforming Data to Standard Normal Distribution: Z-Scores\n\nA z-score, or standard score, is used for standardizing scores on the same scale by dividing a score's deviation by the standard deviation in a data set. The result is a standard score. It measures the number of standard deviations that a given data point is from the mean. You would use z-score to ensure your feature distributions have mean = 0 and std = 1.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:11.788233600Z\",\"start_time\":\"2023-11-21T21:26:11.330059300Z\"}' execution_count=6}\n``` {.python .cell-code}\ndef transform_iris_normal():\n    iris_scaled = iris.copy()\n    for feature in features_list:\n        feature_mean = np.mean(iris_scaled[feature])\n        feature_std = np.std(iris_scaled[feature])\n        iris_scaled[feature] = iris_scaled[feature].apply(lambda f: (f - feature_mean) / feature_std)\n    return iris_scaled\n\niris_scaled_df = transform_iris_normal()\niris_histogram_plotter(df=iris_scaled_df)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=758 height=758}\n:::\n:::\n\n\nThe features are now transformed and each value indicate the number of standard deviations that a given observation is above or below the mean.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-11-21T21:26:11.793530700Z\",\"start_time\":\"2023-11-21T21:26:11.788233600Z\"}' execution_count=7}\n``` {.python .cell-code}\nmean = np.mean(iris_scaled_df['sepal_length'].round(2))\nsd = np.std(iris_scaled_df['sepal_length'].round(2))\nprint(f\"Sepal Length Mean after Z-Score Transformation : {mean:.2f} \")\nprint(f\"Sepal Length Standard Deviation after Z-Score Transformation : {sd:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal Length Mean after Z-Score Transformation : 0.00 \nSepal Length Standard Deviation after Z-Score Transformation : 1.00\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}