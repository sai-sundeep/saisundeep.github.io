{
  "hash": "f41e3a0fbdf69a6f18cf89c8b1350474",
  "result": {
    "markdown": "---\ntitle: Linear and Non-Linear Regression\nauthor: Sai Sundeep Rayidi\ndate: '2023-12-05'\ncategories:\n  - Linear Regression\n  - Non-Linear Regression\nformat:\n  html:\n    code-fold: true\n    code-summary: Show the code\n---\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T16:32:07.748105900Z\",\"start_time\":\"2023-10-26T16:32:07.732195300Z\"}' execution_count=1}\n``` {.python .cell-code}\n#Import Packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nsns.set_theme(style=\"darkgrid\")\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T15:52:31.912697Z\",\"start_time\":\"2023-10-26T15:52:31.840067100Z\"}' execution_count=2}\n``` {.python .cell-code}\ndiamonds = sns.load_dataset('diamonds')\nprint(diamonds.shape)\nprint(diamonds.describe())\nprint(diamonds.head(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(53940, 10)\n              carat         depth         table         price             x  \\\ncount  53940.000000  53940.000000  53940.000000  53940.000000  53940.000000   \nmean       0.797940     61.749405     57.457184   3932.799722      5.731157   \nstd        0.474011      1.432621      2.234491   3989.439738      1.121761   \nmin        0.200000     43.000000     43.000000    326.000000      0.000000   \n25%        0.400000     61.000000     56.000000    950.000000      4.710000   \n50%        0.700000     61.800000     57.000000   2401.000000      5.700000   \n75%        1.040000     62.500000     59.000000   5324.250000      6.540000   \nmax        5.010000     79.000000     95.000000  18823.000000     10.740000   \n\n                  y             z  \ncount  53940.000000  53940.000000  \nmean       5.734526      3.538734  \nstd        1.142135      0.705699  \nmin        0.000000      0.000000  \n25%        4.720000      2.910000  \n50%        5.710000      3.530000  \n75%        6.540000      4.040000  \nmax       58.900000     31.800000  \n   carat        cut color clarity  depth  table  price     x     y     z\n0   0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n1   0.21    Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n2   0.23       Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31\n3   0.29    Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63\n4   0.31       Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75\n5   0.24  Very Good     J    VVS2   62.8   57.0    336  3.94  3.96  2.48\n6   0.24  Very Good     I    VVS1   62.3   57.0    336  3.95  3.98  2.47\n7   0.26  Very Good     H     SI1   61.9   55.0    337  4.07  4.11  2.53\n8   0.22       Fair     E     VS2   65.1   61.0    337  3.87  3.78  2.49\n9   0.23  Very Good     H     VS1   59.4   61.0    338  4.00  4.05  2.39\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T16:35:00.031495600Z\",\"start_time\":\"2023-10-26T16:34:59.143356600Z\"}' execution_count=3}\n``` {.python .cell-code}\nsns.histplot(data=diamonds, x='price', kde=True)\nplt.title('Diamonds Dataset - Price Distribution')\nplt.ylabel(\"# of sales\")\nplt.xlabel(\"Price\")\nplt.grid('both')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=605 height=455}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T16:33:12.952332800Z\",\"start_time\":\"2023-10-26T16:33:12.777618Z\"}' execution_count=4}\n``` {.python .cell-code}\nsns.countplot(data=diamonds, y='cut', order=diamonds['cut'].value_counts().index,\n              palette=sns.color_palette('flare', 10))\nplt.title('Diamonds Dataset - sales by cut type')\nplt.xlabel('# of Sales')\nplt.ylabel('Cut Type')\nplt.grid('both')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=656 height=464}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T16:33:02.939732500Z\",\"start_time\":\"2023-10-26T16:33:02.748882100Z\"}' execution_count=5}\n``` {.python .cell-code}\nsns.countplot(data=diamonds, y='clarity', \n              order = diamonds['clarity'].value_counts(ascending=True).index,\n              palette=sns.color_palette('flare', 10))\nplt.xlabel('# of Sales')\nplt.ylabel('Clarity Type')\nplt.title('Diamonds Dataset - Sales by Clarity Type')\nplt.grid('both')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=656 height=464}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T16:32:46.643921Z\",\"start_time\":\"2023-10-26T16:32:46.499217700Z\"}' execution_count=6}\n``` {.python .cell-code}\nsns.countplot(data=diamonds, \n              x = 'color', \n              order = diamonds['color'].value_counts(ascending=False).index,\n              palette=sns.color_palette('flare', 10))\nplt.ylabel('# of Sales')\nplt.xlabel('Color')\nplt.grid('both')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=656 height=464}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:33:51.778661100Z\",\"start_time\":\"2023-10-26T17:33:51.124834300Z\"}' execution_count=7}\n``` {.python .cell-code}\nsns.kdeplot(diamonds, x='price', hue='color', common_norm=False)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=626 height=435}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:40:50.068908900Z\",\"start_time\":\"2023-10-26T17:40:50.050214200Z\"}' execution_count=8}\n``` {.python .cell-code}\ndiamonds['clarity'].value_counts(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nclarity\nSI1     13065\nVS2     12258\nSI2      9194\nVS1      8171\nVVS2     5066\nVVS1     3655\nIF       1790\nI1        741\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:40:55.190610Z\",\"start_time\":\"2023-10-26T17:40:55.132117500Z\"}' execution_count=9}\n``` {.python .cell-code}\ndiamonds['color'].value_counts(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ncolor\nG    11292\nE     9797\nF     9542\nH     8304\nD     6775\nI     5422\nJ     2808\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:40:58.033141600Z\",\"start_time\":\"2023-10-26T17:40:57.971438500Z\"}' execution_count=10}\n``` {.python .cell-code}\ndiamonds['cut'].value_counts(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ncut\nIdeal        21551\nPremium      13791\nVery Good    12082\nGood          4906\nFair          1610\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:48:46.755062600Z\",\"start_time\":\"2023-10-26T17:48:46.114742400Z\"}' execution_count=11}\n``` {.python .cell-code}\n# Analyzing distribution of numeric features with histogram plot\nsns.set_theme(style=\"whitegrid\")\ndiamonds.hist(bins=50, figsize=(12, 8))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=967 height=657}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:50:05.717996200Z\",\"start_time\":\"2023-10-26T17:50:05.700818800Z\"}' execution_count=12}\n``` {.python .cell-code}\ncorr_matrix = diamonds.select_dtypes(np.number).corr()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T17:50:37.123589900Z\",\"start_time\":\"2023-10-26T17:50:37.107829500Z\"}' execution_count=13}\n``` {.python .cell-code}\ncorr_matrix['price'].sort_values(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nprice    1.000000\ncarat    0.921591\nx        0.884435\ny        0.865421\nz        0.861249\ntable    0.127134\ndepth   -0.010647\nName: price, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T18:47:58.235267500Z\",\"start_time\":\"2023-10-26T18:47:52.530949500Z\"}' execution_count=14}\n``` {.python .cell-code}\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(diamonds[['price', 'carat', 'x', 'y', 'z', 'table', 'depth']], figsize=(15, 10))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=1197 height=821}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T19:17:11.185590800Z\",\"start_time\":\"2023-10-26T19:13:11.337356900Z\"}' execution_count=15}\n``` {.python .cell-code}\nfrom prettytable import PrettyTable\ndef pretty_printing_function(correlation_name, row_values, column_names):\n    summary_table = PrettyTable()\n    summary_table.title = f\"{correlation_name} Correlation Matrix for the tute1 dataset\"\n    column_names = [f'Feature({chr(0x2193)})/({chr(0x2192)})'] + column_names\n    summary_table.field_names = column_names\n    for i in range(len(row_values)):\n        row_index = column_names[i+1]\n        row_values[i] = [row_index] + row_values[i]\n        summary_table.add_row(row_values[i])\n    print(summary_table)\n\n\ndef calc_pearson_corr(x, y, N):\n    numerator_sum = 0.0; denomnator1_sum = 0.0; denomnator2_sum = 0.0\n    x_mean = np.mean(x)\n    y_mean = np.mean(y)\n    for i in range(N):\n        x_diff = x[i] - x_mean\n        y_diff = y[i] - y_mean\n        numerator_sum += (x_diff * y_diff)\n        denomnator1_sum += np.power(x_diff, 2)\n        denomnator2_sum += np.power(y_diff, 2)\n    pearson_corrcoef = numerator_sum/(np.sqrt(denomnator1_sum)*np.sqrt(denomnator2_sum))\n    return round(pearson_corrcoef, 2)\n\n\ndef calc_partial_corr(x, y, z):\n    r_xy = calc_pearson_corr(x, y, len(diamonds))\n    r_xz = calc_pearson_corr(x, z, len(diamonds))\n    r_yz = calc_pearson_corr(y, z, len(diamonds))\n    partial_corr = (r_xy - (r_xz*r_yz)) / (np.sqrt(1 - r_xz**2) * np.sqrt(1 - r_yz**2))\n    return round(partial_corr, 2)\n\n\ndiamonds_numeric = diamonds.select_dtypes(np.number)\ndef calc_partial_correlation():\n    summary_df = pd.DataFrame(columns = diamonds_numeric.columns, index = diamonds_numeric.columns)\n    for col1 in diamonds_numeric.columns:\n        for col2 in diamonds_numeric.columns:\n            if col1 == col2:\n                summary_df.loc[col1, col2] = 1.0\n            else:\n                other_columns = list(set(diamonds_numeric.columns) - set([col1, col2]))\n                for col3 in other_columns:\n                    summary_df.loc[col1, col2] = calc_partial_corr(diamonds_numeric[col1], diamonds_numeric[col2], diamonds_numeric[col3])\n    pretty_printing_function(\"Partial\", summary_df.values.tolist(), column_names=list(summary_df.columns))\n    return summary_df\n\ncalc_partial_correlation()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------------------------------------------------------------------------+\n|            Partial Correlation Matrix for the tute1 dataset            |\n+----------------+-------+-------+-------+-------+-------+-------+-------+\n| Feature(↓)/(→) | carat | depth | table | price |   x   |   y   |   z   |\n+----------------+-------+-------+-------+-------+-------+-------+-------+\n|     carat      |  1.0  | -0.18 |  0.12 |  0.65 |  0.77 |  0.49 | -0.01 |\n|     depth      | -0.18 |  1.0  | -0.32 | -0.17 | -0.48 | -0.37 |  0.49 |\n|     table      |  0.12 | -0.32 |  1.0  |  0.0  |  0.23 |  0.12 | -0.18 |\n|     price      |  0.65 | -0.17 |  0.0  |  1.0  |  0.37 |  0.33 |  0.06 |\n|       x        |  0.77 | -0.48 |  0.23 |  0.37 |  1.0  |  0.64 |  0.97 |\n|       y        |  0.49 | -0.37 |  0.12 |  0.33 |  0.64 |  1.0  |  0.15 |\n|       z        | -0.01 |  0.49 | -0.18 |  0.06 |  0.97 |  0.15 |  1.0  |\n+----------------+-------+-------+-------+-------+-------+-------+-------+\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>carat</th>\n      <th>depth</th>\n      <th>table</th>\n      <th>price</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>carat</th>\n      <td>1.0</td>\n      <td>-0.18</td>\n      <td>0.12</td>\n      <td>0.65</td>\n      <td>0.77</td>\n      <td>0.49</td>\n      <td>-0.01</td>\n    </tr>\n    <tr>\n      <th>depth</th>\n      <td>-0.18</td>\n      <td>1.0</td>\n      <td>-0.32</td>\n      <td>-0.17</td>\n      <td>-0.48</td>\n      <td>-0.37</td>\n      <td>0.49</td>\n    </tr>\n    <tr>\n      <th>table</th>\n      <td>0.12</td>\n      <td>-0.32</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.23</td>\n      <td>0.12</td>\n      <td>-0.18</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>0.65</td>\n      <td>-0.17</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.37</td>\n      <td>0.33</td>\n      <td>0.06</td>\n    </tr>\n    <tr>\n      <th>x</th>\n      <td>0.77</td>\n      <td>-0.48</td>\n      <td>0.23</td>\n      <td>0.37</td>\n      <td>1.0</td>\n      <td>0.64</td>\n      <td>0.97</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>0.49</td>\n      <td>-0.37</td>\n      <td>0.12</td>\n      <td>0.33</td>\n      <td>0.64</td>\n      <td>1.0</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <td>-0.01</td>\n      <td>0.49</td>\n      <td>-0.18</td>\n      <td>0.06</td>\n      <td>0.97</td>\n      <td>0.15</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T19:56:20.076654700Z\",\"start_time\":\"2023-10-26T19:56:19.898683400Z\"}' execution_count=16}\n``` {.python .cell-code}\ndiamonds.plot(kind=\"scatter\", x=\"price\", y=\"carat\",\n             alpha=0.07, grid=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=581 height=435}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T19:57:20.239470600Z\",\"start_time\":\"2023-10-26T19:57:20.176523500Z\"}' execution_count=17}\n``` {.python .cell-code}\ndiamonds.shape\ndiamonds.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>carat</th>\n      <th>cut</th>\n      <th>color</th>\n      <th>clarity</th>\n      <th>depth</th>\n      <th>table</th>\n      <th>price</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.23</td>\n      <td>Ideal</td>\n      <td>E</td>\n      <td>SI2</td>\n      <td>61.5</td>\n      <td>55.0</td>\n      <td>326</td>\n      <td>3.95</td>\n      <td>3.98</td>\n      <td>2.43</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.21</td>\n      <td>Premium</td>\n      <td>E</td>\n      <td>SI1</td>\n      <td>59.8</td>\n      <td>61.0</td>\n      <td>326</td>\n      <td>3.89</td>\n      <td>3.84</td>\n      <td>2.31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.23</td>\n      <td>Good</td>\n      <td>E</td>\n      <td>VS1</td>\n      <td>56.9</td>\n      <td>65.0</td>\n      <td>327</td>\n      <td>4.05</td>\n      <td>4.07</td>\n      <td>2.31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.29</td>\n      <td>Premium</td>\n      <td>I</td>\n      <td>VS2</td>\n      <td>62.4</td>\n      <td>58.0</td>\n      <td>334</td>\n      <td>4.20</td>\n      <td>4.23</td>\n      <td>2.63</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.31</td>\n      <td>Good</td>\n      <td>J</td>\n      <td>SI2</td>\n      <td>63.3</td>\n      <td>58.0</td>\n      <td>335</td>\n      <td>4.34</td>\n      <td>4.35</td>\n      <td>2.75</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.24</td>\n      <td>Very Good</td>\n      <td>J</td>\n      <td>VVS2</td>\n      <td>62.8</td>\n      <td>57.0</td>\n      <td>336</td>\n      <td>3.94</td>\n      <td>3.96</td>\n      <td>2.48</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.24</td>\n      <td>Very Good</td>\n      <td>I</td>\n      <td>VVS1</td>\n      <td>62.3</td>\n      <td>57.0</td>\n      <td>336</td>\n      <td>3.95</td>\n      <td>3.98</td>\n      <td>2.47</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.26</td>\n      <td>Very Good</td>\n      <td>H</td>\n      <td>SI1</td>\n      <td>61.9</td>\n      <td>55.0</td>\n      <td>337</td>\n      <td>4.07</td>\n      <td>4.11</td>\n      <td>2.53</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.22</td>\n      <td>Fair</td>\n      <td>E</td>\n      <td>VS2</td>\n      <td>65.1</td>\n      <td>61.0</td>\n      <td>337</td>\n      <td>3.87</td>\n      <td>3.78</td>\n      <td>2.49</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0.23</td>\n      <td>Very Good</td>\n      <td>H</td>\n      <td>VS1</td>\n      <td>59.4</td>\n      <td>61.0</td>\n      <td>338</td>\n      <td>4.00</td>\n      <td>4.05</td>\n      <td>2.39</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:34:28.761383700Z\",\"start_time\":\"2023-10-26T20:34:28.729891800Z\"}' execution_count=18}\n``` {.python .cell-code}\n# One-hot encode the categorical variabled before feeding into linear model\nfrom sklearn.preprocessing import OneHotEncoder\n\ndiamonds_cut = diamonds[['cut']]\n\nenc = OneHotEncoder(handle_unknown='ignore')\ndiamonds_cuts_onehot = enc.fit_transform(diamonds_cut)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:35:01.475584200Z\",\"start_time\":\"2023-10-26T20:35:01.455234Z\"}' execution_count=19}\n``` {.python .cell-code}\nenc.categories_\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[array(['Fair', 'Good', 'Ideal', 'Premium', 'Very Good'], dtype=object)]\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:35:07.057193100Z\",\"start_time\":\"2023-10-26T20:35:07.041259600Z\"}' execution_count=20}\n``` {.python .cell-code}\nenc.get_feature_names_out()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\narray(['cut_Fair', 'cut_Good', 'cut_Ideal', 'cut_Premium',\n       'cut_Very Good'], dtype=object)\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:35:49.300424200Z\",\"start_time\":\"2023-10-26T20:35:49.253212300Z\"}' execution_count=21}\n``` {.python .cell-code}\ndiamonds_cuts_onehot.toarray()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray([[0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 1., 0., 0., 0.],\n       ...,\n       [0., 0., 0., 0., 1.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 1., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:58:46.490822300Z\",\"start_time\":\"2023-10-26T20:58:46.455046Z\"}' execution_count=22}\n``` {.python .cell-code}\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer\n\ncategorical_features = ['cut', 'color', 'clarity']\nnumeric_features = ['x', 'y', 'z', 'carat', 'depth', 'table']\n\nnumeric_transformer = make_pipeline(SimpleImputer(strategy='median'), StandardScaler())\n\npreprocessor = ColumnTransformer(\n    [\n        ('num', numeric_transformer, numeric_features),\n        ('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_features),\n    ],\n    verbose_feature_names_out=False\n)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:58:54.129989Z\",\"start_time\":\"2023-10-26T20:58:54.114063100Z\"}' execution_count=23}\n``` {.python .cell-code}\ndiamonds_features, diamonds_price = diamonds.loc[:, diamonds.columns != 'price'], diamonds['price']\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:58:55.560701100Z\",\"start_time\":\"2023-10-26T20:58:55.558250500Z\"}' execution_count=24}\n``` {.python .cell-code}\ndiamonds_features.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n(53940, 9)\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:58:59.711588800Z\",\"start_time\":\"2023-10-26T20:58:59.679956Z\"}' execution_count=25}\n``` {.python .cell-code}\ndiamonds_price.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n(53940,)\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-26T20:59:01.879385400Z\",\"start_time\":\"2023-10-26T20:59:01.863274500Z\"}' execution_count=26}\n``` {.python .cell-code}\ndiamonds_features.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>carat</th>\n      <th>cut</th>\n      <th>color</th>\n      <th>clarity</th>\n      <th>depth</th>\n      <th>table</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.23</td>\n      <td>Ideal</td>\n      <td>E</td>\n      <td>SI2</td>\n      <td>61.5</td>\n      <td>55.0</td>\n      <td>3.95</td>\n      <td>3.98</td>\n      <td>2.43</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.21</td>\n      <td>Premium</td>\n      <td>E</td>\n      <td>SI1</td>\n      <td>59.8</td>\n      <td>61.0</td>\n      <td>3.89</td>\n      <td>3.84</td>\n      <td>2.31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.23</td>\n      <td>Good</td>\n      <td>E</td>\n      <td>VS1</td>\n      <td>56.9</td>\n      <td>65.0</td>\n      <td>4.05</td>\n      <td>4.07</td>\n      <td>2.31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.29</td>\n      <td>Premium</td>\n      <td>I</td>\n      <td>VS2</td>\n      <td>62.4</td>\n      <td>58.0</td>\n      <td>4.20</td>\n      <td>4.23</td>\n      <td>2.63</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.31</td>\n      <td>Good</td>\n      <td>J</td>\n      <td>SI2</td>\n      <td>63.3</td>\n      <td>58.0</td>\n      <td>4.34</td>\n      <td>4.35</td>\n      <td>2.75</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:12:35.470919700Z\",\"start_time\":\"2023-10-27T04:12:35.391970900Z\"}' execution_count=27}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\ndiamonds_features_train, diamonds_features_test, diamonds_price_train, diamonds_price_test = train_test_split(diamonds_features, diamonds_price, test_size=0.25)\n\n#print(diamonds_features_train.head(), diamonds_price_train.head())\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:37:18.578767700Z\",\"start_time\":\"2023-10-27T04:37:18.424856600Z\"}' execution_count=28}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = make_pipeline(preprocessor, LinearRegression())\nlin_reg.fit(diamonds_features_train, diamonds_price_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                                  (&#x27;standardscaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;,\n                                                   &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False),\n                                                  [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                                   verbose_feature_names_out=False)),\n                (&#x27;linearregression&#x27;, LinearRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                                  (&#x27;standardscaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;,\n                                                   &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False),\n                                                  [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                                   verbose_feature_names_out=False)),\n                (&#x27;linearregression&#x27;, LinearRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                  SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                 (&#x27;standardscaler&#x27;,\n                                                  StandardScaler())]),\n                                 [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;, &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                (&#x27;cat&#x27;,\n                                 OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                               sparse_output=False),\n                                 [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;, &#x27;depth&#x27;, &#x27;table&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:38:05.886747500Z\",\"start_time\":\"2023-10-27T04:38:05.823902900Z\"}' execution_count=29}\n``` {.python .cell-code}\nlin_reg[:-1].get_feature_names_out()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\narray(['x', 'y', 'z', 'carat', 'depth', 'table', 'cut_Fair', 'cut_Good',\n       'cut_Ideal', 'cut_Premium', 'cut_Very Good', 'color_D', 'color_E',\n       'color_F', 'color_G', 'color_H', 'color_I', 'color_J',\n       'clarity_I1', 'clarity_IF', 'clarity_SI1', 'clarity_SI2',\n       'clarity_VS1', 'clarity_VS2', 'clarity_VVS1', 'clarity_VVS2'],\n      dtype=object)\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:38:49.389348800Z\",\"start_time\":\"2023-10-27T04:38:49.006543500Z\"}' execution_count=30}\n``` {.python .cell-code}\nlin_reg_input_features = lin_reg[:-1].get_feature_names_out()\npd.Series(lin_reg[-1].coef_.ravel(), index=lin_reg_input_features).plot.bar()\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-31-output-1.png){width=657 height=465}\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:39:03.362019500Z\",\"start_time\":\"2023-10-27T04:39:03.317344800Z\"}' execution_count=31}\n``` {.python .cell-code}\ndiamonds_price_predictor = lin_reg.predict(diamonds_features_test)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:39:05.682923900Z\",\"start_time\":\"2023-10-27T04:39:05.650950500Z\"}' execution_count=32}\n``` {.python .cell-code}\nlin_reg[-1].coef_\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\narray([-1.25868758e+03,  1.27214638e+02, -2.14508727e+01,  5.34258409e+03,\n       -9.47981200e+01, -6.26319163e+01, -1.32338602e+14, -1.32338602e+14,\n       -1.32338602e+14, -1.32338602e+14, -1.32338602e+14, -1.31891651e+15,\n       -1.31891651e+15, -1.31891651e+15, -1.31891651e+15, -1.31891651e+15,\n       -1.31891651e+15, -1.31891651e+15, -4.95270736e+14, -4.95270736e+14,\n       -4.95270736e+14, -4.95270736e+14, -4.95270736e+14, -4.95270736e+14,\n       -4.95270736e+14, -4.95270736e+14])\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:39:10.101743800Z\",\"start_time\":\"2023-10-27T04:39:10.073130800Z\"}' execution_count=33}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nprint(\"Mean Squared Error: %.2f\" % mean_squared_error(diamonds_price_test, diamonds_price_predictor))\nprint(\"Coefficient of Determination: %.2f\" % r2_score(diamonds_price_test, diamonds_price_predictor))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 1290106.23\nCoefficient of Determination: 0.92\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:42:29.514113800Z\",\"start_time\":\"2023-10-27T04:42:27.577839400Z\"}' execution_count=34}\n``` {.python .cell-code}\nfrom sklearn.linear_model import SGDRegressor\n\nsgd_reg = make_pipeline(preprocessor, SGDRegressor(max_iter=1000, tol=1e-5, penalty=None, eta0=0.01, n_iter_no_change=100, random_state=42))\nsgd_reg.fit(diamonds_features_train, diamonds_price_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                                  (&#x27;standardscaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;,\n                                                   &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False),\n                                                  [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                                   verbose_feature_names_out=False)),\n                (&#x27;sgdregressor&#x27;,\n                 SGDRegressor(n_iter_no_change=100, penalty=None,\n                              random_state=42, tol=1e-05))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                                  (&#x27;standardscaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;,\n                                                   &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False),\n                                                  [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                                   verbose_feature_names_out=False)),\n                (&#x27;sgdregressor&#x27;,\n                 SGDRegressor(n_iter_no_change=100, penalty=None,\n                              random_state=42, tol=1e-05))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                  SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                 (&#x27;standardscaler&#x27;,\n                                                  StandardScaler())]),\n                                 [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;, &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                (&#x27;cat&#x27;,\n                                 OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                               sparse_output=False),\n                                 [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;, &#x27;depth&#x27;, &#x27;table&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDRegressor</label><div class=\"sk-toggleable__content\"><pre>SGDRegressor(n_iter_no_change=100, penalty=None, random_state=42, tol=1e-05)</pre></div></div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:46:31.440390200Z\",\"start_time\":\"2023-10-27T04:46:31.392768Z\"}' execution_count=35}\n``` {.python .cell-code}\nprice_predictor_sgd = sgd_reg.predict(diamonds_features_test)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:47:14.753844800Z\",\"start_time\":\"2023-10-27T04:47:14.674575800Z\"}' execution_count=36}\n``` {.python .cell-code}\nprint(\"Mean Squared Error: %.2f\" % mean_squared_error(diamonds_price_test, price_predictor_sgd))\nprint(\"Coefficient of Determination: %.2f\" % r2_score(diamonds_price_test, price_predictor_sgd))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 1288354.76\nCoefficient of Determination: 0.92\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:52:16.717464500Z\",\"start_time\":\"2023-10-27T04:51:28.881451600Z\"}' execution_count=37}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestRegressor\n\nrfr_reg = make_pipeline(preprocessor, RandomForestRegressor())\nrfr_reg.fit(diamonds_features_train, diamonds_price_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                                  (&#x27;standardscaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;,\n                                                   &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False),\n                                                  [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                                   verbose_feature_names_out=False)),\n                (&#x27;randomforestregressor&#x27;, RandomForestRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                                   SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                                  (&#x27;standardscaler&#x27;,\n                                                                   StandardScaler())]),\n                                                  [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;,\n                                                   &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse_output=False),\n                                                  [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                                   verbose_feature_names_out=False)),\n                (&#x27;randomforestregressor&#x27;, RandomForestRegressor())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n                                                  SimpleImputer(strategy=&#x27;median&#x27;)),\n                                                 (&#x27;standardscaler&#x27;,\n                                                  StandardScaler())]),\n                                 [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;, &#x27;depth&#x27;, &#x27;table&#x27;]),\n                                (&#x27;cat&#x27;,\n                                 OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                               sparse_output=False),\n                                 [&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;])],\n                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;carat&#x27;, &#x27;depth&#x27;, &#x27;table&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;median&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;cut&#x27;, &#x27;color&#x27;, &#x27;clarity&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:52:22.477783800Z\",\"start_time\":\"2023-10-27T04:52:22.047258400Z\"}' execution_count=38}\n``` {.python .cell-code}\nprice_predictor_rfr = rfr_reg.predict(diamonds_features_test)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2023-10-27T04:52:38.698920Z\",\"start_time\":\"2023-10-27T04:52:38.651693800Z\"}' execution_count=39}\n``` {.python .cell-code}\nprint(\"Mean Squared Error: %.2f\" % mean_squared_error(diamonds_price_test, price_predictor_rfr))\nprint(\"Coefficient of Determination: %.2f\" % r2_score(diamonds_price_test, price_predictor_rfr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 301225.87\nCoefficient of Determination: 0.98\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}